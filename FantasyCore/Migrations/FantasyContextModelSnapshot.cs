// <auto-generated />
using System;
using FantasyCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FantasyCore.Migrations
{
    [DbContext(typeof(FantasyContext))]
    partial class FantasyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FantasyCore.Models.News", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_news_player_id");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("FantasyCore.Models.Player", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checksum");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("JerseyNumber")
                        .HasColumnType("integer")
                        .HasColumnName("jersey_number");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text")
                        .HasColumnName("photo_url");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.HasIndex("Age")
                        .HasDatabaseName("ix_players_age");

                    b.HasIndex("LastName")
                        .HasDatabaseName("ix_players_last_name");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_players_position_id");

                    b.HasIndex("SportId")
                        .HasDatabaseName("ix_players_sport_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_players_team_id");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("FantasyCore.Models.Position", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("AverageAge")
                        .HasColumnType("integer")
                        .HasColumnName("average_age");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_positions_name");

                    b.HasIndex("SportId")
                        .HasDatabaseName("ix_positions_sport_id");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("FantasyCore.Models.Sport", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sports");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_sports_name");

                    b.ToTable("sports", (string)null);
                });

            modelBuilder.Entity("FantasyCore.Models.Team", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SportId")
                        .HasColumnType("integer")
                        .HasColumnName("sport_id");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("SportId")
                        .HasDatabaseName("ix_teams_sport_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("FantasyCore.Models.News", b =>
                {
                    b.HasOne("FantasyCore.Models.Player", "Player")
                        .WithMany("News")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_players_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyCore.Models.Player", b =>
                {
                    b.HasOne("FantasyCore.Models.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_players_positions_position_id");

                    b.HasOne("FantasyCore.Models.Sport", "Sport")
                        .WithMany("Players")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_players_sports_sport_id");

                    b.HasOne("FantasyCore.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_players_teams_team_id");

                    b.Navigation("Position");

                    b.Navigation("Sport");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FantasyCore.Models.Position", b =>
                {
                    b.HasOne("FantasyCore.Models.Sport", "Sport")
                        .WithMany("Positions")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_positions_sports_sport_id");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("FantasyCore.Models.Team", b =>
                {
                    b.HasOne("FantasyCore.Models.Sport", "Sport")
                        .WithMany("Teams")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teams_sports_sport_id");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("FantasyCore.Models.Player", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("FantasyCore.Models.Position", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("FantasyCore.Models.Sport", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Positions");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FantasyCore.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
